<?php

/** @noinspection PhpUnused */
declare(strict_types=1);

namespace Collectme;

use Collectme\Misc\Installer;
use Collectme\Misc\ShortcodeHandler;

/**
 * Shortcode identifier. Example shortcode: [collectme cause=asdf123]
 */
const SHORTCODE_TAG = 'collectme';

/**
 * Path to the directory holing the manifest.json and the assets' directory. Relative to plugin base path.
 */
const DIST_DIR = 'dist';

/**
 * Path to the manifest.json generated by vite
 */
const PATH_MANIFEST = COLLECTME_BASE_PATH . '/' . DIST_DIR . '/manifest.json';

/**
 * Path to the translated strings for the frontend
 */
const PATH_APP_STRINGS = COLLECTME_BASE_PATH . '/languages/app-strings.php';

/**
 * Plugin option keys for WordPress' option API
 */
const OPTION_KEY_DB_VERSION = 'collectme_db_version';
const OPTION_KEY_PLUGIN_VERSION = 'collectme_plugin_version';

/**
 * Routing related
 */
const REST_ROUTE_PREFIX = 'collectme';
const REST_V1_NAMESPACE = REST_ROUTE_PREFIX.'/v1';

/**
 * Database related
 */
const DB_PREFIX = 'collectme_';

/**
 * Auth related
 */
const AUTH_COOKIE_KEY = 'WP_COLLECTME_AUTH';
const AUTH_COOKIE_TTL = '5 years';
const AUTH_SESSION_KEY = 'WP_COLLECTME_AUTH';

class Collectme
{
    public function __construct(
        private readonly Installer $installer,
        private readonly ShortcodeHandler $shortcodeHandler,
        private readonly RestRouterV1 $restRouter,
    ) {
    }

    /**
     * @throws \JsonException
     */
    public function init(): void
    {
        $this->registerHooks();
        $this->registerShortcodes();
    }

    private function registerHooks(): void
    {
        register_activation_hook(COLLECTME_PLUGIN_NAME, [$this->installer, 'activate']);
        register_deactivation_hook(COLLECTME_PLUGIN_NAME, [$this->installer, 'deactivate']);
        register_uninstall_hook(COLLECTME_PLUGIN_NAME, [Installer::class, 'uninstall']);
        add_action('admin_init', [$this->installer, 'afterPluginUpdated']);

        add_action('rest_api_init', [$this->restRouter, 'init']);

        /**
         * Don't add styles and scripts the WordPress way, this doesn't allow to add them only if the
         * shortcode is present in combination with a timber based theme. Additionally, it's hacky
         * as we need to customize the script tag to support modules.
         *
         * Scripts and styles are therefore directly printed by the controller.
         */
        // add_action('wp_enqueue_scripts', '');
    }

    private function registerShortcodes(): void
    {
        add_shortcode(SHORTCODE_TAG, [$this->shortcodeHandler, 'process']);
    }
}